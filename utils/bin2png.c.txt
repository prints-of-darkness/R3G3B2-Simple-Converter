#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <errno.h>

#define STB_IMAGE_WRITE_IMPLEMENTATION
#include "stb_image_write.h"

#define RGB332_FORMAT_ID 0x332

typedef struct {
    uint16_t width;
    uint16_t height;
    uint16_t format_id;
} ImageMetadata;

int rgb332_to_rgba(unsigned char* rgb332_data, int width, int height, unsigned char** rgba_data)
{
    if (rgb332_data == NULL || width <= 0 || height <= 0 || rgba_data == NULL) {
        fprintf(stderr, "Error: Invalid arguments to rgb332_to_rgba.\n");
        return 1;
    }

    int image_size = width * height;
    if (image_size <= 0) {
        fprintf(stderr, "Error: Invalid image dimensions (width * height <= 0).\n");
        return 1;
    }

    *rgba_data = (unsigned char*)malloc(image_size * 4); // 4 bytes per pixel (RGBA)
    if (!*rgba_data) {
        perror("Error allocating RGBA buffer");
        return 1;
    }

    for (int i = 0; i < image_size; ++i) {
        unsigned char pixel = rgb332_data[i];
        unsigned char r = ((pixel >> 5) & 0x7) * 255 / 7;
        unsigned char g = ((pixel >> 2) & 0x7) * 255 / 7;
        unsigned char b = (pixel & 0x3) * 255 / 3;

        (*rgba_data)[i * 4 + 0] = r; // R
        (*rgba_data)[i * 4 + 1] = g; // G
        (*rgba_data)[i * 4 + 2] = b; // B
        (*rgba_data)[i * 4 + 3] = 255; // A (fully opaque)
    }
    return 0;
}

int main(int argc, char* argv[]) {
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <input_bin_file> <output_png_file>\n", argv[0]);
        return 1; // Return 1 for error
    }

    const char* input_file = argv[1];
    const char* output_file = argv[2];

    if (strcmp(input_file, output_file) == 0) {
        fprintf(stderr, "Error: Input and output file cannot be the same.\n");
        return 1;
    }

    FILE* fp = fopen(input_file, "rb");
    if (!fp) {
        fprintf(stderr, "Error: failed to open file %s: %s\n", input_file, strerror(errno));
        return 1;
    }

    ImageMetadata meta;
    if (fread(&meta, sizeof(ImageMetadata), 1, fp) != 1) {
        fprintf(stderr, "Error: failed to read header from %s: %s\n", input_file, strerror(errno));
        fclose(fp);
        return 1;
    }

    if (meta.width <= 0 || meta.height <= 0) {
        fprintf(stderr, "Error: Invalid image dimensions in header (width: %d, height: %d).\n", meta.width, meta.height);
        fclose(fp);
        return 1;
    }


    uint8_t* imageData = malloc(meta.width * meta.height);
    if (!imageData) {
        perror("Error allocating image data buffer");
        fclose(fp);
        return 1;
    }

    size_t bytes_read = fread(imageData, 1, meta.width * meta.height, fp);
    if (bytes_read != (size_t)(meta.width * meta.height)) {
        fprintf(stderr, "Error: failed to read image data from %s, read %zu bytes, expected %d: %s\n",
            input_file, bytes_read, meta.width * meta.height, (feof(fp) ? "end of file" : strerror(errno)));
        free(imageData);
        fclose(fp);
        return 1;
    }


    unsigned char* rgba_data = NULL;

    if (meta.format_id == RGB332_FORMAT_ID) {
        if (rgb332_to_rgba(imageData, meta.width, meta.height, &rgba_data) != 0) {
            free(imageData);
            fclose(fp);
            return 1;
        }
    }
    else {
        fprintf(stderr, "Error: Unsupported format ID %d\n", meta.format_id);
        free(imageData);
        fclose(fp);
        return 1;
    }

    int success = stbi_write_png(output_file, meta.width, meta.height, 4, rgba_data, meta.width * 4);
    if (!success) {
        fprintf(stderr, "Error writing PNG file: %s\n", output_file);
    }
    else {
        printf("PNG image saved to: %s\n", output_file);
    }

    free(imageData);
    free(rgba_data);
    fclose(fp);

    return success ? 0 : 1;
}